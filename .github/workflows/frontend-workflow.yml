name: Build and Package Frontend App
on:
  push:
    branches: ["main"]
    paths:
      - "angular-16-crud-example-master/**"
      - ".github/workflows/frontend-workflow.yml"
      - "!README.md"
      - "!angular-16-crud-example-master/README.md"
jobs:
  sast:
    if: ${{ false }}
    name: SonarCloud SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: angular-16-crud-example-master/
  sca:
    if: ${{ false }}
    name: Snyk SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk to check for vulnerabilities
        run: |
          cd angular-16-crud-example-master
          npm install
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --severity-threshold=high --file=package.json
          snyk monitor

  node-build:
    if: ${{ false }}
    needs: [sast,sca]
    # if: "contains(github.event.head_commit.message,'run workflow')"
    uses: ./.github/workflows/angular-build.yaml
    with:
      directory: "angular-16-crud-example-master"
      artifact-name: "dist"
  docker-build:
    runs-on: ubuntu-latest
    needs: node-build
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: angular-16-crud-example-master/dist
      - name: Extract image version
        uses: ./actions/image-version-action
      - name: Build Docker image
        run: cd angular-16-crud-example-master && docker build -t elmazidi/myapp-frontend:${{ env.version }} .
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk to check for vulnerabilities
        run: |
          cd angular-16-crud-example-master
          npm install
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test elmazidi/myapp-frontend:${{ env.version }}
          snyk container monitor elmazidi/myapp-frontend:${{ env.version }}
      - name: Log in to Docker Hub
        run: docker login -u elmazidi -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend Docker image
        run: docker push elmazidi/myapp-frontend:${{ env.version }}
      - name: Share image version with the next Job
        id: extract-version
        run: echo "version=${{ env.version }}" >> "$GITHUB_OUTPUT"
  dast:
    name: OWASP ZAP DAST
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    services:
      frontend:
        image: elmazidi/myapp-frontend:${{ env.version }} 
        ports:
          - 4200:80
    steps:
     - uses: actions/checkout@v3
     - name: Logging
       run: ls
     - name: Extract image version
       uses: ./actions/image-version-action
     - name: ZAP Scan
       uses: zaproxy/action-baseline@v0.6.1
       with:
        docker_name: 'owasp/zap2docker-stable'
        target: 'http://localhost:4200/'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
     
  gitops-k8s-deploy:
    if: ${{ false }}
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Configure Git
        run: |
          git config --global user.email "ilyasselmazidi123@gmail.com"
          git config --global user.name "ELMILYASS"
      - name: Clone the Git repository containing the K8s cluster's configuration files.
        run: git clone https://github.com/ELMILYASS/K8sClusterDevopsProject.git
      - name: Update deployment version
        run: cd K8sClusterDevopsProject/dev && sed -i "s/myapp-frontend:.*/myapp-frontend:${{needs.docker-build.outputs.version}}/g" frontend-app.yaml

      - name: Display updated deployment file
        run: cd K8sClusterDevopsProject/dev && cat frontend-app.yaml

      - name: Commit changes
        run: |
          cd K8sClusterDevopsProject
          git add .
          git commit -m "frontend version ${{needs.docker-build.outputs.version}}"

      - name: Set Git remote URL
        run: cd K8sClusterDevopsProject && git remote set-url origin https://ELMILYASS:${{ secrets.GITHUBTOKEN }}@github.com/ELMILYASS/K8sClusterDevopsProject.git
      - name: Push changes to Github
        run: cd K8sClusterDevopsProject && git push -uf origin main
